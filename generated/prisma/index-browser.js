
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  email: 'email',
  phone: 'phone',
  website: 'website',
  logo: 'logo',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.SchoolSettingsScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  gradingScale: 'gradingScale',
  termCountPerYear: 'termCountPerYear',
  caWeight: 'caWeight',
  examWeight: 'examWeight',
  policies: 'policies',
  academicYear: 'academicYear',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  email: 'email',
  role: 'role',
  password: 'password',
  address: 'address',
  avi: 'avi',
  createdAt: 'createdAt',
  isActive: 'isActive',
  createdById: 'createdById',
  lastLogin: 'lastLogin',
  phone: 'phone',
  schoolId: 'schoolId',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  role: 'role',
  password: 'password',
  avi: 'avi',
  createdAt: 'createdAt',
  isActive: 'isActive',
  createdById: 'createdById',
  dateOfBirth: 'dateOfBirth',
  employeeId: 'employeeId',
  hireDate: 'hireDate',
  lastLogin: 'lastLogin',
  qualification: 'qualification',
  salary: 'salary',
  schoolId: 'schoolId',
  specialization: 'specialization',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  email: 'email',
  regNo: 'regNo',
  password: 'password',
  avi: 'avi',
  createdAt: 'createdAt',
  classId: 'classId',
  sessionId: 'sessionId',
  isActive: 'isActive',
  address: 'address',
  bloodGroup: 'bloodGroup',
  createdById: 'createdById',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  lastLogin: 'lastLogin',
  parentId: 'parentId',
  phoneNumber: 'phoneNumber',
  schoolId: 'schoolId',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById'
};

exports.Prisma.ParentScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  occupation: 'occupation',
  relationship: 'relationship',
  isActive: 'isActive',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  category: 'category',
  description: 'description',
  isActive: 'isActive',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  teacherId: 'teacherId',
  isActive: 'isActive',
  capacity: 'capacity',
  createdAt: 'createdAt',
  gradeId: 'gradeId',
  schoolId: 'schoolId',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  year: 'year',
  isCurrent: 'isCurrent',
  createdAt: 'createdAt',
  endDate: 'endDate',
  isActive: 'isActive',
  schoolId: 'schoolId',
  startDate: 'startDate',
  updatedAt: 'updatedAt'
};

exports.Prisma.TermScalarFieldEnum = {
  id: 'id',
  termNumber: 'termNumber',
  sessionId: 'sessionId',
  createdAt: 'createdAt',
  endDate: 'endDate',
  isActive: 'isActive',
  isCurrent: 'isCurrent',
  name: 'name',
  startDate: 'startDate',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  createdAt: 'createdAt',
  description: 'description',
  isActive: 'isActive',
  isCore: 'isCore',
  schoolId: 'schoolId',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssessmentScalarFieldEnum = {
  id: 'id',
  exam: 'exam',
  firstTest: 'firstTest',
  secondTest: 'secondTest',
  project: 'project',
  ca: 'ca',
  total: 'total',
  subjectId: 'subjectId',
  studentId: 'studentId',
  grade: 'grade',
  assignment: 'assignment',
  createdAt: 'createdAt',
  maxScore: 'maxScore',
  position: 'position',
  remark: 'remark',
  sessionId: 'sessionId',
  termId: 'termId',
  type: 'type',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  status: 'status',
  remark: 'remark',
  studentId: 'studentId',
  classId: 'classId',
  termId: 'termId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentSubjectScalarFieldEnum = {
  studentId: 'studentId',
  subjectId: 'subjectId',
  enrolledAt: 'enrolledAt',
  isActive: 'isActive'
};

exports.Prisma.ClassSubjectScalarFieldEnum = {
  classId: 'classId',
  subjectId: 'subjectId',
  assignedAt: 'assignedAt',
  isActive: 'isActive'
};

exports.Prisma.TeacherClassScalarFieldEnum = {
  teacherId: 'teacherId',
  classId: 'classId',
  assignedAt: 'assignedAt',
  isActive: 'isActive'
};

exports.Prisma.TeacherSubjectScalarFieldEnum = {
  subjectId: 'subjectId',
  teacherId: 'teacherId',
  assignedAt: 'assignedAt',
  isActive: 'isActive'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  action: 'action',
  oldValues: 'oldValues',
  newValues: 'newValues',
  userId: 'userId',
  userType: 'userType',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp',
  schoolId: 'schoolId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.GradeCategory = exports.$Enums.GradeCategory = {
  NURSERY: 'NURSERY',
  PRIMARY: 'PRIMARY',
  JUNIOR_SECONDARY: 'JUNIOR_SECONDARY',
  SENIOR_SECONDARY: 'SENIOR_SECONDARY'
};

exports.GradeLetter = exports.$Enums.GradeLetter = {
  A: 'A',
  B: 'B',
  C: 'C',
  D: 'D',
  E: 'E',
  F: 'F'
};

exports.AssessmentType = exports.$Enums.AssessmentType = {
  CONTINUOUS: 'CONTINUOUS',
  EXAMINATION: 'EXAMINATION',
  PROJECT: 'PROJECT',
  ASSIGNMENT: 'ASSIGNMENT',
  QUIZ: 'QUIZ'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  EXCUSED: 'EXCUSED'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT'
};

exports.Prisma.ModelName = {
  School: 'School',
  SchoolSettings: 'SchoolSettings',
  Admin: 'Admin',
  Teacher: 'Teacher',
  Student: 'Student',
  Parent: 'Parent',
  Grade: 'Grade',
  Class: 'Class',
  Session: 'Session',
  Term: 'Term',
  Subject: 'Subject',
  Assessment: 'Assessment',
  Attendance: 'Attendance',
  StudentSubject: 'StudentSubject',
  ClassSubject: 'ClassSubject',
  TeacherClass: 'TeacherClass',
  TeacherSubject: 'TeacherSubject',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
