generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id          String          @id @default(uuid())
  name        String          @unique
  address     String?
  email       String?         @unique
  phone       String?
  website     String?
  logo        String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdById String?
  updatedById String?
  admins      Admin[]
  auditLogs   AuditLog[]
  classes     Class[]
  grades      Grade[]
  parents     Parent[]
  createdBy   Admin?          @relation("CreatedSchools", fields: [createdById], references: [id])
  updatedBy   Admin?          @relation("UpdatedSchools", fields: [updatedById], references: [id])
  settings    SchoolSettings?
  sessions    Session[]
  students    Student[]
  subjects    Subject[]
  teachers    Teacher[]

  @@index([isActive])
}

model SchoolSettings {
  id               String   @id @default(uuid())
  schoolId         String   @unique
  gradingScale     String?
  termCountPerYear Int?     @default(3)
  caWeight         Int?     @default(40)
  examWeight       Int?     @default(60)
  policies         String?
  academicYear     String?
  currency         String?  @default("NGN")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdById      String?
  updatedById      String?
  createdBy        Admin?   @relation("CreatedSettings", fields: [createdById], references: [id])
  school           School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  updatedBy        Admin?   @relation("UpdatedSettings", fields: [updatedById], references: [id])
}

model Admin {
  id              String           @id @default(uuid())
  firstName       String
  lastName        String
  middleName      String?
  email           String           @unique
  role            Role             @default(ADMIN)
  password        String
  address         String?
  avi             String?
  createdAt       DateTime         @default(now())
  isActive        Boolean          @default(true)
  createdById     String?
  lastLogin       DateTime?
  phone           String?
  schoolId        String?
  updatedAt       DateTime         @updatedAt
  updatedById     String?
  createdBy       Admin?           @relation("CreatedAdmins", fields: [createdById], references: [id])
  createdAdmins   Admin[]          @relation("CreatedAdmins")
  school          School?           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  updatedBy       Admin?           @relation("UpdatedAdmins", fields: [updatedById], references: [id])
  updatedAdmins   Admin[]          @relation("UpdatedAdmins")
  createdSchools  School[]         @relation("CreatedSchools")
  updatedSchools  School[]         @relation("UpdatedSchools")
  createdSettings SchoolSettings[] @relation("CreatedSettings")
  updatedSettings SchoolSettings[] @relation("UpdatedSettings")
  createdStudents Student[]        @relation("CreatedStudents")
  updatedStudents Student[]        @relation("UpdatedStudents")
  createdTeachers Teacher[]        @relation("CreatedTeachers")
  updatedTeachers Teacher[]        @relation("UpdatedTeachers")

  @@index([schoolId])
  @@index([email])
  @@index([isActive])
}

model Teacher {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  middleName     String?
  phone          String
  email          String           @unique
  address        String?
  role           Role             @default(TEACHER)
  password       String
  avi            String?
  createdAt      DateTime         @default(now())
  isActive       Boolean          @default(true)
  createdById    String?
  dateOfBirth    DateTime?
  employeeId     String?          @unique
  hireDate       DateTime?
  lastLogin      DateTime?
  qualification  String?
  salary         Decimal?
  schoolId       String
  specialization String?
  updatedAt      DateTime         @updatedAt
  updatedById    String?
  classTeacherOf Class[]
  createdBy      Admin?           @relation("CreatedTeachers", fields: [createdById], references: [id])
  school         School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  updatedBy      Admin?           @relation("UpdatedTeachers", fields: [updatedById], references: [id])
  classes        TeacherClass[]
  subjects       TeacherSubject[]

  @@index([schoolId])
  @@index([email])
  @@index([employeeId])
  @@index([isActive])
}

model Student {
  id            String           @id @default(uuid())
  firstName     String
  lastName      String
  middleName    String?
  email         String?          @unique
  regNo         String           @unique
  password      String
  avi           String?
  createdAt     DateTime         @default(now())
  classId       String
  sessionId     String
  isActive      Boolean          @default(true)
  address       String?
  bloodGroup    String?
  createdById   String?
  dateOfBirth   DateTime
  gender        Gender?
  lastLogin     DateTime?
  parentId      String?
  phoneNumber   String?
  schoolId      String
  updatedAt     DateTime         @updatedAt
  updatedById   String?
  assessments   Assessment[]
  attendance    Attendance[]
  class         Class            @relation(fields: [classId], references: [id])
  createdBy     Admin?           @relation("CreatedStudents", fields: [createdById], references: [id])
  parent        Parent?          @relation(fields: [parentId], references: [id])
  school        School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  admissionYear Session          @relation(fields: [sessionId], references: [id])
  updatedBy     Admin?           @relation("UpdatedStudents", fields: [updatedById], references: [id])
  subjects      StudentSubject[]

  @@unique([regNo, schoolId])
  @@index([schoolId])
  @@index([classId])
  @@index([sessionId])
  @@index([parentId])
  @@index([isActive])
}

model Parent {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  middleName   String?
  email        String    @unique
  phone        String
  address      String?
  occupation   String?
  relationship String
  isActive     Boolean   @default(true)
  schoolId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  school       School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  children     Student[]

  @@index([schoolId])
  @@index([email])
}

model Grade {
  id          String        @id @default(uuid())
  name        String
  level       Int
  category    GradeCategory
  description String?
  isActive    Boolean       @default(true)
  schoolId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  classes     Class[]
  school      School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([name, schoolId])
  @@unique([level, category, schoolId])
  @@index([schoolId])
  @@index([category])
}

model Class {
  id           String         @id @default(uuid())
  name         String
  teacherId    String
  isActive     Boolean        @default(true)
  capacity     Int?           @default(30)
  createdAt    DateTime       @default(now())
  gradeId      String
  schoolId     String
  updatedAt    DateTime       @updatedAt
  attendance   Attendance[]
  grade        Grade          @relation(fields: [gradeId], references: [id])
  school       School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classTeacher Teacher        @relation(fields: [teacherId], references: [id])
  subjects     ClassSubject[]
  students     Student[]
  teachers     TeacherClass[]

  @@unique([name, gradeId, schoolId])
  @@index([schoolId])
  @@index([gradeId])
  @@index([teacherId])
}

model Session {
  id          String       @id @default(uuid())
  year        String
  isCurrent   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  endDate     DateTime
  isActive    Boolean      @default(true)
  schoolId    String
  startDate   DateTime
  updatedAt   DateTime     @updatedAt
  assessments Assessment[]
  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students    Student[]
  terms       Term[]

  @@unique([year, schoolId])
  @@index([schoolId])
  @@index([isCurrent])
}

model Term {
  id          String       @id @default(uuid())
  termNumber  Int
  sessionId   String
  createdAt   DateTime     @default(now())
  endDate     DateTime
  isActive    Boolean      @default(true)
  isCurrent   Boolean      @default(false)
  name        String
  startDate   DateTime
  updatedAt   DateTime     @updatedAt
  assessments Assessment[]
  attendance  Attendance[]
  session     Session      @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([termNumber, sessionId])
  @@index([sessionId])
  @@index([isCurrent])
}

model Subject {
  id          String           @id @default(uuid())
  name        String
  code        String?
  createdAt   DateTime         @default(now())
  description String?
  isActive    Boolean          @default(true)
  isCore      Boolean          @default(false)
  schoolId    String
  updatedAt   DateTime         @updatedAt
  assessments Assessment[]
  classes     ClassSubject[]
  students    StudentSubject[]
  school      School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teachers    TeacherSubject[]

  @@unique([name, schoolId])
  @@unique([code, schoolId])
  @@index([schoolId])
  @@index([isCore])
  @@index([isActive])
}

model Assessment {
  id         String         @id @default(uuid())
  exam       Int            @default(0)
  firstTest  Int            @default(0)
  secondTest Int            @default(0)
  project    Int            @default(0)
  ca         Int            @default(0)
  total      Int            @default(0)
  subjectId  String
  studentId  String
  grade      GradeLetter    @default(F)
  assignment Int            @default(0)
  createdAt  DateTime       @default(now())
  maxScore   Int            @default(100)
  position   Int?
  remark     String?
  sessionId  String
  termId     String
  type       AssessmentType @default(CONTINUOUS)
  updatedAt  DateTime       @updatedAt
  session    Session        @relation(fields: [sessionId], references: [id])
  student    Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject    Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  term       Term           @relation(fields: [termId], references: [id])

  @@unique([studentId, subjectId, termId, sessionId])
  @@index([studentId])
  @@index([subjectId])
  @@index([termId])
  @@index([sessionId])
}

model Attendance {
  id        String           @id @default(uuid())
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  remark    String?
  studentId String
  classId   String
  termId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  class     Class            @relation(fields: [classId], references: [id])
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  term      Term             @relation(fields: [termId], references: [id])

  @@unique([studentId, date])
  @@index([studentId])
  @@index([classId])
  @@index([date])
  @@index([termId])
}

model StudentSubject {
  studentId  String
  subjectId  String
  enrolledAt DateTime @default(now())
  isActive   Boolean  @default(true)
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([studentId, subjectId])
  @@index([studentId])
  @@index([subjectId])
}

model ClassSubject {
  classId    String
  subjectId  String
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([classId, subjectId])
  @@index([classId])
  @@index([subjectId])
}

model TeacherClass {
  teacherId  String
  classId    String
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([teacherId, classId])
  @@index([teacherId])
  @@index([classId])
}

model TeacherSubject {
  subjectId  String
  teacherId  String
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([subjectId, teacherId])
  @@index([subjectId])
  @@index([teacherId])
}

model AuditLog {
  id        String      @id @default(uuid())
  tableName String
  recordId  String
  action    AuditAction
  oldValues Json?
  newValues Json?
  userId    String
  userType  Role
  ipAddress String?
  userAgent String?
  timestamp DateTime    @default(now())
  schoolId  String
  school    School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([tableName, recordId])
  @@index([userId, userType])
  @@index([schoolId])
  @@index([timestamp])
}

enum GradeLetter {
  A
  B
  C
  D
  E
  F
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum GradeCategory {
  NURSERY
  PRIMARY
  JUNIOR_SECONDARY
  SENIOR_SECONDARY
}

enum AssessmentType {
  CONTINUOUS
  EXAMINATION
  PROJECT
  ASSIGNMENT
  QUIZ
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}
